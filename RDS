AWS RDS

- Amazon RDS
    
    - AWS에서 제공하는 완전 관리형 관계형 데이터베이스 서비스
    - 데이터베이스 설치, 운영, 확장, 패치, 백업 등을 자동 관리
    - 사용자는 애플리케이션 개발에 집중 가능함

    - Amazon RDS는 관계형 데이터베이스를 클라우드에 손쉽게 운영할 수 있도록 하는 서비스
    - 서버 설치나 백업,패치 같은 번거로운 작업을 AWS가 함
    - 개발자는 비지니스 로직에 집중

- RDS전의 기존 데이터베이스의 한계

    - 온프레미스 DB : 직접 설치, 운영(직접 설치 및 관리 필요), 확장성 한계(서버 자원 한정으로 데이터나 트래픽 많을시 확장 어려움),
	- 장애 복구 부담(서버나 DB에 장애가 생기면 복구 직접 해야 함)
    - 오픈소스 DB : 무료이지만 성능, 안정성 제약, 전문 튜닝(사용자가 직접 최적화 필요) 필요
    - 상용 DB : 안정적이지만 라이선스 비용 비쌈, 벤더 종속성(특정 회사에 계속 의존해 다른 제품 사용 X 종속됨)

- RDS 엔진의 종류

    - MySQL : 오픈소스, 대중적
    - PostgreSQL : 확장성·표준 SQL 강점
    - MariaDB : MySQL 기반 오픈소스
    - Oracle : 안정성·기업용 기능 풍부(라이선스 비용있음)
    - MS SQL Server : Windows 생태계와 강력 통합

- AWS RDS의 장점

    - 인프라 관리 부담 감소
    - 자동화 기능 (백업,모니터링,패치등)
    - 고가용성 제공 (Multi-AZ배포)
    - 필요 시 수 분 내에 확장 가능
    - 안정적으로 DB사용은 비용 부담 발생 그러므로 AWS와 같은 관리형 서비스 도입하는 추세

- Aurora RDS(기본 RDS의 업그레이드)의 장점

    - 완전 관리형 관계형 DB엔진
    - MySQL PostgreSQL 호환 + 성능 극대화 > MySQL 대비 5배, PostgreSQL 대비 3배 성능
    - RDS 엔진 대비 고성능이지만 저비용(비싸긴 한데 성능 대비론 RDS보다 좋은편)
    - 클라우드 네이티브 아키텍처(처음부터 클라우드 환경을 위해 설계됨 운영의 유연함 추가)

- Aurora RDS의 특징

    - 기존 쓰던 코드 도구 그대로 사용 가능
    - 용량 자동 증감 : 10GB부터 시작, 10GB단위로 용량 증가 (최대 128TB)
    - 고성능 분산 스토리지 : 6중 복제, 내결함성 제공
	- 내결함성 : Fault Tolerance, 시스템 일부에 장애가 발생해도 전체 서비스가 멈추지않고 계속 동작하는 능력
	- 각 AZ마다 2개의 데이터 복제본 저장 X 최소 3개 이상의 AZ = 6중 복제
    - Aurora는 데이터를 10GB단위의 세그먼트로 쪼갬 ex) 1TB면 약 100개의 10GB 세그먼트로 나눔
	- 세그먼트 : 데이터를 관리하기 위해 쪼갠 큰 덩어리
	- 그 세그먼트를 다시 몇 MB의 데이터 블록 단위로 나눔 > Aurora에 여러번 저장함 (복구가 더 빠르고 효율적임)

- Quorum(쿼럼) 모델 : 내결함성, 고가용성

    - Quorum(쿼럼) 모델 : 다수결의 원리와 비슷하게 여러 복제본 중 일정 개수 이상응답시 작업을 성공적으로 처리하는 방식
    - Quorum(쿼럼) : 의사 결정에 필요한 최소 인원, 합의를 위한 최소 응답 수
    - Self-healing(자가 복구) : 손실된 복제본은 자가 치유, 지속적으로 손실된 부분을 검사 후 복구

    - ex) Aurora에서는 3개의 AZ에 총 6개의 복제본을 분산 저장
	- 쓰기 작업 : 최소 4개의 복제본이 응답해야함
	- 읽기 작업 : 최소 3개의 복제본이 응답해야함

- Aurora의 두가지 레벨

    - 스토리지 레벨
	- 데이터가 저장되는 공간
	- Aurora는 6개의 복제본 유지
	- Quorum 모델을 통해 내결함성과 고가용성 보장
    
    - 컴퓨팅 레벨
	- 데이터를 읽고 쓰는 DB 인스턴스(Writer/Reader)
	- Single-Master : Writer 1개(하나의 인스턴스가 쓰기 담당) + 여러 Reader (여러 인스턴스가 읽기 담당)
	- Multi-Master : 모든 인스턴스가 Writer 가능

- Single-Master

    - 구성
	- Writer 인스턴스 : 1개 (쓰기 전용)
	- Reader 인스턴스 : 최대 15개 (읽기 전용 Replica)

    - 동작방식
	- 쓰기 작업은 반드시 Writer에서 수행
	- 읽기 작업은 Reader 인스턴스로 분산 처리(트래픽 부하 다운)

    - 복제방식
	- Async 복제(비동기 : 약간의 지연 시간이 있음 대신 읽기 처리량을 크게 늘림)로 Reader와 데이터 동기화 

    - 고가용성
	- Writer 장애시 Reader중 하나가 Writer로 자동 승격

    - 특징
	- 대부분의 워크로드(처리해야할 작업의 종류와 양)에 적합
	- 읽기 트래픽 확장에 강점 
